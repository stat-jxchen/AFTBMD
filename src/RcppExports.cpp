// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BMD
NumericVector BMD(SEXP BS, SEXP KM, SEXP ny, SEXP h1, SEXP h2, SEXP group, int M, double lambda1, double lambda2, String penalty, double eps);
RcppExport SEXP _AFTBMD_BMD(SEXP BSSEXP, SEXP KMSEXP, SEXP nySEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP groupSEXP, SEXP MSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP penaltySEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type BS(BSSEXP);
    Rcpp::traits::input_parameter< SEXP >::type KM(KMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ny(nySEXP);
    Rcpp::traits::input_parameter< SEXP >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type group(groupSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(BMD(BS, KM, ny, h1, h2, group, M, lambda1, lambda2, penalty, eps));
    return rcpp_result_gen;
END_RCPP
}
// l2_norm
double l2_norm(SEXP x);
RcppExport SEXP _AFTBMD_l2_norm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_norm(x));
    return rcpp_result_gen;
END_RCPP
}
// l1_norm
double l1_norm(SEXP x);
RcppExport SEXP _AFTBMD_l1_norm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(l1_norm(x));
    return rcpp_result_gen;
END_RCPP
}
// sortxy
NumericVector sortxy(SEXP x, SEXP y, SEXP pointx);
RcppExport SEXP _AFTBMD_sortxy(SEXP xSEXP, SEXP ySEXP, SEXP pointxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type pointx(pointxSEXP);
    rcpp_result_gen = Rcpp::wrap(sortxy(x, y, pointx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_AFTBMD_BMD", (DL_FUNC) &_AFTBMD_BMD, 11},
    {"_AFTBMD_l2_norm", (DL_FUNC) &_AFTBMD_l2_norm, 1},
    {"_AFTBMD_l1_norm", (DL_FUNC) &_AFTBMD_l1_norm, 1},
    {"_AFTBMD_sortxy", (DL_FUNC) &_AFTBMD_sortxy, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_AFTBMD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
